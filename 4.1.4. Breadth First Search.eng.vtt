WEBVTT

1
00:00:03.827 --> 00:00:07.394
Next, we're going to talk about
breadth-first search which

2
00:00:07.394 --> 00:00:12.760
is a completely different way to process
all the vertices connected to a given vertex.

3
00:00:12.760 --> 00:00:16.570
It'll get the job done but
it has a totally different properties that

4
00:00:16.570 --> 00:00:19.358
are useful in different ways for
different applications.

5
00:00:19.358 --> 00:00:27.190
To understand breadth-first
search we'll start right out with a demo.

6
00:00:27.190 --> 00:00:32.190
So breadth-first is not a recursive
algorithm, it uses a queue

7
00:00:32.190 --> 00:00:38.719
as a axillary data structure And
it's also quite simple to explain.

8
00:00:38.719 --> 00:00:43.350
So what we're going to do is
we're going to put the source

9
00:00:43.350 --> 00:00:48.380
vertex on a queue and then repeat
the following until the queue is empty.

10
00:00:48.380 --> 00:00:53.240
Remove the next vertex
from the queue in order.

11
00:00:53.240 --> 00:00:59.070
Then add to the queue all unmarked
vertices that are adjacent to v and

12
00:00:59.070 --> 00:01:02.680
mark them and just keep doing
that until the queue is empty.

13
00:01:02.680 --> 00:01:05.000
Let's see how that works on our example.

14
00:01:05.000 --> 00:01:09.890
This is a smaller example,
just a six vertex

15
00:01:09.890 --> 00:01:15.360
graph with eight edges,
so I add 0 to the queue.

16
00:01:15.360 --> 00:01:19.020
So we just take 0 and put it on the queue,
that's where we start.

17
00:01:19.020 --> 00:01:23.070
And now we're going to repeat until
queue is empty remove a vertex,

18
00:01:23.070 --> 00:01:26.600
add all unmarked vertex adjacent and
mark them.

19
00:01:26.600 --> 00:01:33.440
So we dequeue 0 and
then in order to process 0 we need to

20
00:01:33.440 --> 00:01:38.640
check all of the adjacent vertices,
so in this case that's 2, 1, and 5.

21
00:01:38.640 --> 00:01:43.652
And again the order depends on
how the bag was constructed for

22
00:01:43.652 --> 00:01:46.016
vertices adjacent to zero.

23
00:01:48.129 --> 00:01:53.049
So we check 2 and that is not marked,

24
00:01:53.049 --> 00:01:57.800
so we have to add it to the queue.

25
00:01:57.800 --> 00:02:02.620
And then we check 1, that's not marked so
we add it to the queue.

26
00:02:02.620 --> 00:02:08.650
And then we check 5, and that's not
marked so we add it to the queue So

27
00:02:08.650 --> 00:02:13.450
we finished processing, 0,0 is done.

28
00:02:13.450 --> 00:02:16.820
So now remove the next
vertex from the queue.

29
00:02:16.820 --> 00:02:22.230
In this case it's 2, we're going to
take 2 off the queue and process it by

30
00:02:22.230 --> 00:02:27.320
adding to the queue all the unmarked
vertices that are adjacent.

31
00:02:27.320 --> 00:02:31.580
So to process 2, we have to check 0, 1,

32
00:02:31.580 --> 00:02:36.070
3, and 4, we check 0 that's already
marked so we don't do anything.

33
00:02:36.070 --> 00:02:40.040
We check 1, that's also already marked so,

34
00:02:40.040 --> 00:02:44.760
we don't do anything in
fact it's on the queue.

35
00:02:44.760 --> 00:02:51.040
We check 3 and that one is unmarked so,
we mark it and add it to the queue and

36
00:02:51.040 --> 00:02:57.030
then we check 4 that one's unmarked,
so we mark it and add it to the queue.

37
00:02:57.030 --> 00:03:00.860
So by the way, I didn't mention, but

38
00:03:02.240 --> 00:03:09.250
we're also keeping track of 2
auxiliary data structures for this.

39
00:03:10.420 --> 00:03:12.220
One is the edgeTo array,

40
00:03:12.220 --> 00:03:17.320
which is the same as before,
what edge did we use to get to this?

41
00:03:17.320 --> 00:03:23.320
So 4, and we got to 4 from 2 and
2 we got to 2 from 0,

42
00:03:23.320 --> 00:03:28.210
so again that's going to be a tree that
gives us a path back to the source.

43
00:03:28.210 --> 00:03:35.580
And instead of marked, we also keep
a more detailed information which is

44
00:03:35.580 --> 00:03:40.360
the length of the path because we
do it because it's easy to do it.

45
00:03:40.360 --> 00:03:48.090
Okay, so four, we check four and add it
to the queue and now we're done with two.

46
00:03:48.090 --> 00:03:54.970
So now we have 1, 5, 3, and 4 are all in
the queue and we're going to process them.

47
00:03:56.220 --> 00:04:00.810
And since we've marked everything,
all we're going to be doing now is

48
00:04:02.150 --> 00:04:07.490
checking vertices that are marked, so
for 1 we check 0 and that's marked.

49
00:04:07.490 --> 00:04:11.480
Then we check 2 and that's marked,
so then we're done with 1.

50
00:04:11.480 --> 00:04:16.380
Next thing off the queue is 5 and
we check 3 and

51
00:04:16.380 --> 00:04:21.270
that's marked and we check 0 and that's
marked so we're done with 5 and then 3.

52
00:04:21.270 --> 00:04:24.290
We gotta check 5 and

53
00:04:24.290 --> 00:04:30.290
then 4 and then two and they're all
marked and now we're done with three.

54
00:04:30.290 --> 00:04:34.340
And then finally the last one, always
the last one, everybody else is marked, so

55
00:04:34.340 --> 00:04:35.790
connected.

56
00:04:35.790 --> 00:04:40.170
Check three, check two,
it's marked and we're done.

57
00:04:41.850 --> 00:04:46.710
So what this process [COUGH]
the result of this computation,

58
00:04:46.710 --> 00:04:51.760
again, Is a tree rooted at the source,
we can follow back

59
00:04:51.760 --> 00:04:57.420
through the tree to get paths
from each node to the source.

60
00:04:57.420 --> 00:05:00.180
And not only that,
we can get the distance,

61
00:05:00.180 --> 00:05:04.630
the number of edges on the path
from each node to the source.

62
00:05:05.780 --> 00:05:08.600
So that's a demo of breadth-first search,
and

63
00:05:08.600 --> 00:05:11.960
next we'll take a look at
properties of this algorithm.

64
00:05:11.960 --> 00:05:15.530
All right, so now we have considered
two different methods for

65
00:05:15.530 --> 00:05:17.960
processing all vertices in the graph.

66
00:05:17.960 --> 00:05:22.050
And actually they are quite closely
related even though the computations

67
00:05:22.050 --> 00:05:23.530
are quite different.

68
00:05:23.530 --> 00:05:26.430
Essentially depth-first
search uses recursion so

69
00:05:26.430 --> 00:05:29.395
it corresponds to putting
unvisited vertices on a stack.

70
00:05:29.395 --> 00:05:34.218
Breadth-first search explicitly we put
the unvisited vertices on the queue.

71
00:05:34.218 --> 00:05:38.690
And actually, breadth-first
search solves another problem

72
00:05:38.690 --> 00:05:42.890
that often we want to solve
called the shortest path problem.

73
00:05:42.890 --> 00:05:48.110
Actually, the path that you get back from
breadth-first search is the path from

74
00:05:48.110 --> 00:05:53.390
the source to the given vertex that
uses the fewest number of edges.

75
00:05:53.390 --> 00:05:58.590
And we'll look at that in just a minute
and the idea is that the Breath-first

76
00:05:58.590 --> 00:06:03.380
search examines the vertices in the graph
in increasing distance from the source.

77
00:06:04.740 --> 00:06:07.818
So let's take a look at that, so

78
00:06:07.818 --> 00:06:13.210
breadth-first search
computes shortest path.

79
00:06:13.210 --> 00:06:16.650
That is it builds the data structure
that we can answer shortest path

80
00:06:16.650 --> 00:06:18.650
queries from the source with.

81
00:06:18.650 --> 00:06:23.500
From s to all other vertices in
the graph in time proportional to E + V,

82
00:06:23.500 --> 00:06:30.780
the number of edges plus the number of vertices
and so let's look at why that's the case.

83
00:06:30.780 --> 00:06:36.840
So first thing is, how do we know
that it computes shortest path?

84
00:06:36.840 --> 00:06:41.070
Well the intuition is, and
you can fill in the details,

85
00:06:42.300 --> 00:06:47.670
the queue always contains some vertices of

86
00:06:47.670 --> 00:06:53.240
distance k from the source, followed by
some vertices of distance k plus one.

87
00:06:53.240 --> 00:07:00.350
So they're on a queue, we're processing
them in first-in-first-out order.

88
00:07:00.350 --> 00:07:05.640
So say we're at a state when all of
these vertices are on the queue.

89
00:07:07.100 --> 00:07:11.820
We're going to have processed
vertex 0 as soon as we get this one

90
00:07:11.820 --> 00:07:16.760
we'll delete vertex 0 from the queue and
then when we're putting these adjacent ones on.

91
00:07:16.760 --> 00:07:19.530
We're adding the ones of distance
two but we're not going to

92
00:07:19.530 --> 00:07:23.610
process any of those until we're done
with the ones of distance 1 and so forth.

93
00:07:23.610 --> 00:07:26.530
So it's not hard to show that always,

94
00:07:26.530 --> 00:07:31.960
you have either one of the two
distances from the source on the queue.

95
00:07:31.960 --> 00:07:35.010
And that means the first
time we get to a vertex,

96
00:07:35.010 --> 00:07:37.310
that's the shortest path to that vertex.

97
00:07:38.345 --> 00:07:45.205
And, again, the running time, we only
visit vertices once because we mark them.

98
00:07:45.205 --> 00:07:48.575
So, it's time proportional
to the number of vertices

99
00:07:48.575 --> 00:07:50.181
plus the number of edges in the graph.

100
00:07:50.181 --> 00:07:54.185
So, that's breadth-first
search properties and

101
00:07:54.185 --> 00:07:57.905
then here's the implementation,
which is simply code for

102
00:07:58.940 --> 00:08:04.900
the basic method that we
outlined in pseudocode.

103
00:08:05.930 --> 00:08:11.170
So our private instance
variables are marked, or

104
00:08:11.170 --> 00:08:16.780
in the demo we used distTo, but
just for simplicity let's use marked.

105
00:08:16.780 --> 00:08:21.940
edgeTo then is how we get to
the first vertex and then the source.

106
00:08:23.080 --> 00:08:28.200
And so I have a constructor that builds
those arrays the same way as before and

107
00:08:28.200 --> 00:08:29.230
then calls BFS.

108
00:08:30.420 --> 00:08:35.250
So BFS builds a queue,
that's what it's going to use, it

109
00:08:35.250 --> 00:08:38.670
enqueues the source and marks the source.

110
00:08:38.670 --> 00:08:43.950
And then this is just in code what we
said in words before, while the queue is

111
00:08:43.950 --> 00:08:49.880
not empty, we pull off the next
vertex from the queue, call it v.

112
00:08:49.880 --> 00:08:56.290
For everybody adjacent to v,
we go ahead and check.

113
00:08:56.290 --> 00:09:01.590
If it's marked, we ignore it and
move to the next If it's not marked,

114
00:09:01.590 --> 00:09:09.080
then we put it on the queue,
mark it, and remember the edge.

115
00:09:09.080 --> 00:09:14.520
And again, this is an example
of the power of abstraction and

116
00:09:14.520 --> 00:09:16.390
utility of our design pattern.

117
00:09:17.660 --> 00:09:20.730
All we're doing in terms of graph

118
00:09:20.730 --> 00:09:25.140
data type is being a client to go
through all the adjacent vertices.

119
00:09:25.140 --> 00:09:30.710
But it allows us to implement this
completely different algorithm

120
00:09:30.710 --> 00:09:33.300
in really an accessible way.

121
00:09:33.300 --> 00:09:37.790
So that's the implementation of breadth-
first search and then the client for

122
00:09:37.790 --> 00:09:38.900
getting the paths back

123
00:09:38.900 --> 00:09:43.040
is the same as for
depth-first search, so

124
00:09:43.040 --> 00:09:48.989
here's an old application of
breadth-first search.

125
00:09:48.989 --> 00:09:53.610
And in computer networks it's very
important when you're communicating

126
00:09:53.610 --> 00:09:57.930
from one place to another you want to
get there in the fewest number of hops.

127
00:09:57.930 --> 00:10:03.260
This is the ARPANET the predecessor
to the internet as of

128
00:10:03.260 --> 00:10:09.010
July 1977 when things were slow and
computers were small and

129
00:10:09.010 --> 00:10:12.348
slow, it's important to do these
things in a small number of hops.

130
00:10:12.348 --> 00:10:15.530
And with breadth-first search,
you could take this graph and

131
00:10:15.530 --> 00:10:20.040
figure out the shortest way to
get from one place to another.

132
00:10:20.040 --> 00:10:23.500
That's a typical application
of breadth-first search.

133
00:10:26.960 --> 00:10:32.300
Here's another one, so-called Kevin Bacon
numbers, and nowadays actually

134
00:10:32.300 --> 00:10:37.626
you can type Bacon and an actor's name and
get the answer to this.

135
00:10:37.626 --> 00:10:40.495
So there's,

136
00:10:40.495 --> 00:10:45.545
if you're not familiar with it, you can
become familiar with it by Kevin Bacon

137
00:10:45.545 --> 00:10:52.405
numbers, the idea is you have a graph
where the vertices are actors.

138
00:10:52.405 --> 00:10:53.795
And the edge,

139
00:10:53.795 --> 00:10:59.230
you think of an edge connecting two
actors, if they were in a movie together.

140
00:10:59.230 --> 00:11:02.255
And so,
what you want to find is given an actor,

141
00:11:02.255 --> 00:11:07.388
[COUGH]
what's the shortest way to get to

142
00:11:07.388 --> 00:11:12.410
Kevin Bacon connected by,
so, we have edges for

143
00:11:12.410 --> 00:11:17.340
actors and edges for movies and a
connection if the actor is in the movie.

144
00:11:17.340 --> 00:11:23.430
So Buzz Mauro and Tatiana Ramirez
were in Sweet Dreams together and

145
00:11:23.430 --> 00:11:26.750
these two actors were in this
movie together and so forth.

146
00:11:26.750 --> 00:11:31.950
And you get away to
Kevin Bacon from any actor and

147
00:11:31.950 --> 00:11:36.550
this is another pop culture application.

148
00:11:36.550 --> 00:11:42.740
This is the so-called six degrees,
which you can get to anyone with six steps

149
00:11:42.740 --> 00:11:48.980
in this way, so that's all
implementation of breadth-first search.

150
00:11:48.980 --> 00:11:53.114
On the Kevin Bacon graph,
where we include one vertex for

151
00:11:53.114 --> 00:11:56.397
each performer, one vertex for each movie.

152
00:11:56.397 --> 00:12:01.490
Connect the movie to all performers that
appear in the movie, and the shortest

153
00:12:01.490 --> 00:12:06.294
path from Kevin Bacon to every actor
if you follow back through that path.

154
00:12:06.294 --> 00:12:11.560
You get the proof of the got
a Kevin Bacon number for

155
00:12:11.560 --> 00:12:18.220
each actor and we have implementation
of that on the book site.

156
00:12:19.270 --> 00:12:25.210
So that's another example, and actually
there's a maybe even older service,

157
00:12:25.210 --> 00:12:30.940
at least similar age example
that mathematicians are fond of.

158
00:12:30.940 --> 00:12:34.450
And that's called
the so-called Erdos number.

159
00:12:34.450 --> 00:12:40.761
So, in this one it's mathematicians,
the nodes are mathematicians and

160
00:12:40.761 --> 00:12:46.971
there's an edge if the two mathematicians
have co-authored a paper and

161
00:12:46.971 --> 00:12:52.800
Paul was a very productive
Hungarian mathematician.

162
00:12:52.800 --> 00:12:58.140
Who travelled the world co-authoring
papers with people all over the world.

163
00:12:58.140 --> 00:13:03.477
A very interesting and
prolific character who actually did

164
00:13:03.477 --> 00:13:10.644
quite a bit of research on properties of
and maybe even more so than Kevin Bacon.

165
00:13:10.644 --> 00:13:14.998
The idea that he was so
prolific that pretty much every

166
00:13:14.998 --> 00:13:18.788
mathematician has a pretty
low Erdos number.

167
00:13:18.788 --> 00:13:23.629
So that's our second example of
a graph processing algorithm,

168
00:13:23.629 --> 00:13:25.610
breadth-first search.
